package programs;

import meshi.applications.minimizeProtein.ExtendedAtomsProtein;
import meshi.energy.EnergyCreator;
import meshi.energy.TotalEnergy;
import meshi.energy.angle.AngleCreator;
import meshi.energy.bond.BondCreator;
import meshi.energy.outOfPlane.OutOfPlaneCreator;
import meshi.energy.plane.PlaneCreator;
import meshi.energy.softExcludedVol.SoftExcludedVolCreator;
import meshi.geometry.DistanceMatrix;
import meshi.molecularElements.AtomList;
import meshi.molecularElements.Protein;
import meshi.optimizers.LBFGS;
import meshi.optimizers.LineSearchException;
import meshi.optimizers.Minimizer;
import meshi.optimizers.MinimizerException;
import meshi.parameters.AtomTypes;
import meshi.parameters.Residues;
import meshi.util.CommandList;
import meshi.util.MeshiProgram;

/**
 *<pre>
 * A minimalist MESHI program.
 * This is a very simple program that:
 * a) Builds a protein model from a pdb-formatted file (an extended atom model).
 * b) Builds a simple energy function that maps each conformation of this protein
 *    to an energy value.
 * c) Minimize the energy of the protein.
 *
 * The code here serves mainly as a simple example for working with meshi, and thus generality and 
 * usability were sacrificed for simplicity and clarity. 
 *  
 * Unix usage:
 *     java -Xmx300m PutHydrogens <commands file name> <pdb file name> 
 *
 * the "-Xmx300m" flag is needed in order for the run to get 300 MB of RAM for its internal use. This
 * much memory is needed only for fairly large proteins (i.e. more than 250 residues), but we 
 * recommend using it anyway to avoid memory exceptions. 
 *
 * The other components of the command are:
 * <commands file name> - A text file containing the different flags and parameters required for 
 *                        the run.
 * <pdb file name> - A file containing a protein structure in a valid PDB format. Note that the 
 *                   program uses the extended-atoms model where most of the hydrogen atoms are 
 *                   swallowed by their heavy neighbors. Superfluous atoms in the PDB file will be
 *                    removed (say hydrogens bound to CA) and missing atoms will be added.
 *
 *
 * The minimization is done in two phases. In phase one all atoms whose coordinates were suplied 
 * by the pdb-file are frozen. The only free atoms (if any) are atoms added during the generation 
 * of the model, say, hydrogen atoms in case the initial coordinates come from X-ray diffraction.
 *  
 * The program writes to the standard-output (default - screen, may be redirected into a file). The 
 * output is composed of three parts: a) Various messages generated by the creation of the new 
 * TotalEnerg class. b) The progress of the minimization. c) The final coordinates of the minimized
 * structure.
 **/

public class PutHydrogens extends MeshiProgram implements Residues, 
							     AtomTypes{ /**
									 * The implemented
									 * interfaces defines the 
									 * names of atom and residue 
									 * types. 
									 **/
    /**
     * Reads, parse and stores the contents of the commands file. 
     **/ 
    private static CommandList commands; 
   
    /**
     * A string with the name of the command file.
     **/
    private static String commandsFileName = null;
 
    /**
     * A string with the name of the pdb file to minimize.
     **/
    private static String modelFileName = null;  

    /**
     * The minimized protein object.
     **/
    private static Protein protein;

 
    public static void main(String[] args) throws MinimizerException, LineSearchException{
	/**
	 * A static function for parsing of the command line arguments and assigning the 
	 * variables commandsFileName, modelFileName and randomNumberSeed with the right values.
	 * Note that this method is using parsing functions such as getOrderedArguments that are 
	 * defined in MeshiProgram that MinimizeProtein extends.
	 **/
	init(args); 

	/**
	 * The protein is created based on the pdb file. 
	 * Note that the atoms of the protein are not necessarily the ones from the input file. 
	 * Some atoms may be added or removed in order to fit the extended atoms model. Added 
	 * atoms are placed in a random position around where they should be. Typically the 
	 * minimization is able to fix this. This is obviously not a very wise decision but it 
	 * is easy to implement. We are currently working on better solution.  <br>
	 **/ 
	protein = new ExtendedAtomsProtein(modelFileName,ADD_HYDROGENS_AND_FREEZE); 
//System.out.println(protein.sequence());
	System.out.println("************* puting hydrogens *********");
	
	adjustHydrogens(commands,protein);

	protein.atoms().print();  
    }

    public static void adjustHydrogens(CommandList commandsParam, Protein prot) {
    	prot.defrost();
    	prot.atoms().filter(new AtomList.NonHydrogen()).freeze();
   		DistanceMatrix distanceMatrix = new DistanceMatrix(prot.atoms(),   5.5, 2.0, 4);  
   		EnergyCreator[] energyCreators = {  
    		    new BondCreator(),
    		    new AngleCreator(),
    		    new PlaneCreator(),
    		    new OutOfPlaneCreator()
    	};
   		TotalEnergy energy = new TotalEnergy(prot, distanceMatrix, energyCreators, commandsParam);

   		Minimizer minimizer = new LBFGS(energy, 0.05 , 750 , 100);  
    	try {
    	  System.out.println(minimizer.minimize());
    	}
    	catch (Exception e) {
    		System.out.println("\n\n\nThere was a problem in the minimization.\n");
    	}    
    }
    
    public static void adjustBackboneStereochemistry(CommandList commandsParam, Protein prot, int fromRes, int toRes) {
    	prot.freeze();
    	for (int cc=fromRes ; cc<=toRes ; cc++) {
    		prot.residue(cc).defrost();
    	}
   		DistanceMatrix distanceMatrix = new DistanceMatrix(prot.atoms(),   5.5, 2.0, 4);  
   		EnergyCreator[] energyCreators = {  
    		    new BondCreator(),
    		    new AngleCreator(),
    		    new PlaneCreator(),
    		    new OutOfPlaneCreator(),
    		    new SoftExcludedVolCreator(10.0 , 12 , 1.0)
    	};
   		TotalEnergy energy = new TotalEnergy(prot, distanceMatrix, energyCreators, commandsParam);

   		Minimizer minimizer = new LBFGS(energy, 0.05 , 10000 , 100);  
    	try {
    	  System.out.println(minimizer.minimize());
    	}
    	catch (Exception e) {
    		System.out.println("\n\n\nThere was a problem in the minimization.\n");
    	}    
    }    

    /** ================================= init =========================================
     *
     *A static function for parsing of the command line arguments and assigning the 
     *variables commandsFileName, modelFileName and randomNumberSeed with the right inputs. Note that this
     *static method is using parsing functions such as getOrderedArguments that are defined in MeshiProgram
     *that MinimizeProtein inherits.
     **/
     
    protected static void init(String[] args) {
 
	/**** NOTE *** the next two lines. Because of a BUG in the Java VM, the 
	 * interfaces "Residues" and "AtomTypes" are not loaded automatically when MinimizeProtein initialize. 
	 * For this purpose these two lines are crucial wherever these two interfaces are implemented. The user might 
	 * rightfully feel that these two lines are "black magic" programming, but happily to our knowledge this is 
	 * the only bizarre phenomenon we are aware of in meshi.
	 **/
	int zvl = ALA; // force the reading of "meshi.parameters.Residues"
	zvl = ACA;// force the reading of "meshi.parameters.AtomTypes"


	String line;
	String errorMessage = ("\n                  ******************\n"+
			       "Usage java -Xmx300m PutHydrogens <commands file name> <pdb file name>\n"+
			       "                    ******************\n");
			      
	if (getFlag("-debug",args)) tableSet("debug",new Boolean(true));
	commandsFileName = getOrderedArgument(args);
	if (commandsFileName == null) throw new RuntimeException(errorMessage);
	System.out.println("# commandsFileName = "+commandsFileName);

	commands = new CommandList(commandsFileName);
	
	modelFileName = getOrderedArgument(args);
	if (modelFileName == null) throw new RuntimeException(errorMessage);
	System.out.println("# initial model file name is "+modelFileName);

	initRandom(333);
    }
}
