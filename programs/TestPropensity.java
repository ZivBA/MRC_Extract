package programs;

import meshi.applications.minimizeProtein.ExtendedAtomsProtein;
import meshi.energy.EnergyCreator;
import meshi.energy.TotalEnergy;
import meshi.energy.angle.AngleCreator;
import meshi.energy.bond.BondCreator;
import meshi.energy.compositeTorsions.compositePropensity2DwithPP.CompositePropensity2DCreator;
import meshi.energy.compositeTorsions.compositePropensity2DwithPP.CompositePropensity2DEnergy;
import meshi.energy.compositeTorsions.compositePropensity2DwithPP.CompositePropensity2DEnergyElement;
import meshi.energy.excludedVol.ExcludedVolCreator;
import meshi.energy.outOfPlane.OutOfPlaneCreator;
import meshi.energy.plane.PlaneCreator;
import meshi.geometry.DistanceMatrix;
import meshi.molecularElements.Protein;
import meshi.optimizers.LBFGS;
import meshi.optimizers.LineSearchException;
import meshi.optimizers.Minimizer;
import meshi.optimizers.MinimizerException;
import meshi.parameters.AtomTypes;
import meshi.parameters.Residues;
import meshi.util.CommandList;
import meshi.util.MeshiProgram;


/**
 *<pre>
 * A minimalist MESHI program.
 * This is a very simple program that:
 * a) Builds a protein model from a pdb-formatted file (an extended atom model).
 * b) Builds a simple energy function that maps each conformation of this protein
 *    to an energy value.
 * c) Minimize the energy of the protein.
 *
 * The code here serves mainly as a simple example for working with meshi, and thus generality and 
 * usability were sacrificed for simplicity and clarity. 
 *  
 * Unix usage:
 *     java -Xmx300m MinimizeProtein <commands file name> <pdb file name> <seed>
 *
 * the "-Xmx300m" flag is needed in order for the run to get 300 MB of RAM for its internal use. This
 * much memory is needed only for fairly large proteins (i.e. more than 250 residues), but we 
 * recommend using it anyway to avoid memory exceptions. 
 *
 * The other components of the command are:
 * <commands file name> - A text file containing the different flags and parameters required for 
 *                        the run.
 * <pdb file name> - A file containing a protein structure in a valid PDB format. Note that the 
 *                   program uses the extended-atoms model where most of the hydrogen atoms are 
 *                   swallowed by their heavy neighbors. Superfluous atoms in the PDB file will be
 *                    removed (say hydrogens bound to CA) and missing atoms will be added.
 *
 * <seed> - An integer to serve as seed for the random number generator.
 *
 * The minimization is done in two phases. In phase one all atoms whose coordinates were suplied 
 * by the pdb-file are frozen. The only free atoms (if any) are atoms added during the generation 
 * of the model, say, hydrogen atoms in case the initial coordinates come from X-ray diffraction.
 *  
 * The program writes to the standard-output (default - screen, may be redirected into a file). The 
 * output is composed of three parts: a) Various messages generated by the creation of the new 
 * TotalEnerg class. b) The progress of the minimization. c) The final coordinates of the minimized
 * structure.
 **/

public class TestPropensity extends MeshiProgram implements Residues, 
							     AtomTypes{ /**
									 * The implemented
									 * interfaces defines the 
									 * names of atom and residue 
									 * types. 
									 **/
    /**
     * Reads, parse and stores the contents of the commands file. 
     **/ 
    private static CommandList commands; 
   
    /**
     * A string with the name of the command file.
     **/
    private static String commandsFileName = null;
 
    /**
     * A string with the name of the pdb file to minimize.
     **/
    private static String modelFileName = null;  

    /**
     * The minimized protein object.
     **/
    private static Protein protein;


    public static void main(String[] args) throws MinimizerException, LineSearchException{
	/**
	 * A static function for parsing of the command line arguments and assigning the 
	 * variables commandsFileName, modelFileName and randomNumberSeed with the right values.
	 * Note that this method is using parsing functions such as getOrderedArguments that are 
	 * defined in MeshiProgram that MinimizeProtein extends.
	 **/
	init(args);
	

	/**
	 * The protein is created based on the pdb file. 
	 * Note that the atoms of the protein are not necessarily the ones from the input file. 
	 * Some atoms may be added or removed in order to fit the extended atoms model. Added 
	 * atoms are placed in a random position around where they should be. Typically the 
	 * minimization is able to fix this. This is obviously not a very wise decision but it 
	 * is easy to implement. We are currently working on better solution.  <br>
	 **/ 
	protein = new ExtendedAtomsProtein(modelFileName,DO_NOT_ADD_ATOMS); 

	/**
	 * The distance matrix object stores all the distances between the protein's atoms. 
	 * Virtually any energy term requires some knowledge about the distnaces between 
	 * atoms. Beacause there are O(n^2) distnaces per n atoms, it is clear that distnace 
	 * calculations must be very efficient. To this end we use the object DistnaceMatrix 
	 * that employ fast heuristics for calculating distnaces in the system. Given the atom 
	 * list of the system (argument #1 in the constructor) an internal matrix of distnace 
	 * objects is created for all the inter-atomic distnaces. To save computing time, distances 
	 * larger than a certain cutoff (argument #2 [Ang]) are considered to be infinity. This is 
	 * sufficient to short range interactions such as VDW that 
	 * are artificially zeroed above the cutoff. The #3 argument define a buffer zone around 
	 * the cutoff used in the calculation of the heuristic, and its value has no affect on 
	 * the results of the run but only on its speed. The optimal value for this  argument is 
	 * problem dependent but 2.0 Ang is usually a good value. The #4 argument defines the number
	 * of covallent bonds between atoms that are considered "bonded". In this example, atoms 
	 * that are separated by 4 bonds or less are considered bonded.
	 **/
	protein.defrost();
	DistanceMatrix distanceMatrix = new DistanceMatrix(protein.atoms(), // The atoms 
							   5.5, /* rMax - Any distance between 
								   non-bonded atoms (separation 
								   of more than four covalent bonds)
								   that is higher than rMax is 
								   considered infinite.
								*/ 
							   2.0, /* the distance matrix buffer (see 
								   DistanceMatrix). Does not affect 
								   the results, does affect 
								   performance.
								*/
							   4);  /* Maximal number of bonds between 
								   bonded atoms. */
	/**
	 * Defining the energy function components.
	 * Each creator object knows how to generate an energy term object. 
	 **/
	EnergyCreator[] energyCreators = {  
	    new BondCreator(),
	    new AngleCreator(),
	    new PlaneCreator(),
	    new OutOfPlaneCreator(),
	    new ExcludedVolCreator(),
	    new CompositePropensity2DCreator(),
	    //new SolvateCreator(1,1,1,1)
	};

	System.out.println("************* Minimization *********");
	/**
	 * TotalEnergy - With the objects we created so far it is now possible to construct the  
	 * total energy function. It should be noted that so far in meshi design we are working 
	 * with energy terms (and their sum - the TotalEnergy) that are DERIVABLE at least ONCE. 
	 * We do it for the purpose of exploiting powerful minimizers (such as LBFGS) that 
	 * require this feature. This means that TotalEnergy also deals with forces. User defined 
	 * parameters such as the relative weights of the energy terms are extracted by the 
	 * TotalEnergy object from the CommandList object.
	 **/    
	TotalEnergy energy = new TotalEnergy(protein, distanceMatrix, energyCreators, commands);
	/**
	 * Minimizer - An abstract class that performs minimization of a system according to an 
	 * energy function. In this line we initialize a minimimizer that implements the LBFGS 
	 * algotrithm. LBFGS (Limited memory BFGS) is a powerful minimization technique with 
	 * very fast convergence, that run at o(n) flops per step , where n is the number of 
	 * atoms. It requires in its constructor the TotalEnergy object as well as the command 
	 * parameter object from which it extracts important paramters such as the maximal 
	 * number of minimizaton step. 
	 **/
	energy.evaluate();
//	SolvateEnergy term = (SolvateEnergy) energy.getEnergyTerm(new SolvateEnergy());
//	System.out.println(term.evaluate(false,1.0,0.0,0.0,0.0) + " " + term.evaluate(false,0.0,1.0,0,0.0)
//+ " " +
//	 term.evaluate(false,0,0.0,1.0,0.0) + " " + term.evaluate(false,0,0.0,0.0,1.0));
	CompositePropensity2DEnergy term = (CompositePropensity2DEnergy) energy.getEnergyTerm(new
CompositePropensity2DEnergy());
	System.out.print(term);
	
	for (int c=0 ; c<term.elementsList().size() ; c++) {
System.out.println(((CompositePropensity2DEnergyElement) 
term.elementsList().elementAt(c)).residueTorsions);
System.out.println(((CompositePropensity2DEnergyElement) term.elementsList().elementAt(c)).evaluate());
	}

	System.exit(1);
	
	Minimizer minimizer = new LBFGS(energy, commands);  

	/**
	 * Minimimzation RUN - Running the mimimzation until either convergence or maximal number 
	 *of steps is reached. 
	 * The coordinates in the Protein object inside the TotalEnergy object inside the LBFGS 
	 * objects are altered.	
	 **/
	minimizer.minimize();
	
    }



    /** ================================= init =========================================
     *
     *A static function for parsing of the command line arguments and assigning the 
     *variables commandsFileName, modelFileName and randomNumberSeed with the right inputs. Note that this
     *static method is using parsing functions such as getOrderedArguments that are defined in MeshiProgram
     *that MinimizeProtein inherits.
     **/
     
    protected static void init(String[] args) {
 
	/**** NOTE *** the next two lines. Because of a BUG in the Java VM, the 
	 * interfaces "Residues" and "AtomTypes" are not loaded automatically when MinimizeProtein initialize. 
	 * For this purpose these two lines are crucial wherever these two interfaces are implemented. The user might 
	 * rightfully feel that these two lines are "black magic" programming, but happily to our knowledge this is 
	 * the only bizarre phenomenon we are aware of in meshi.
	 **/
	int zvl = ALA; // force the reading of "meshi.parameters.Residues"
	zvl = ACA;// force the reading of "meshi.parameters.AtomTypes"


	String line;
	String errorMessage = ("\n                  ******************\n"+
			       "Usage java -Xmx300m MinimizeProtein <commands file name> <pdb file name> seed\n"+
			       "                    ******************\n");
			      
	if (getFlag("-debug",args)) tableSet("debug",new Boolean(true));
	commandsFileName = getOrderedArgument(args);
	if (commandsFileName == null) throw new RuntimeException(errorMessage);
	System.out.println("# commandsFileName = "+commandsFileName);

	commands = new CommandList(commandsFileName);
	
	modelFileName = getOrderedArgument(args);
	if (modelFileName == null) throw new RuntimeException(errorMessage);
	System.out.println("# initial model file name is "+modelFileName);

	String seedString = getOrderedArgument(args);
	if (seedString== null) throw new RuntimeException(errorMessage);
	int seed = (new Integer(seedString)).intValue();
	System.out.println("# seed is "+seed);
	initRandom(seed);
    }
}
